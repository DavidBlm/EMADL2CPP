component EfficientNetB0<classes=10>{
    ports in Z(0:255)^{1, 32, 32} image,
          out Q(0:1)^{classes} predictions;
    implementation CNN {
        def stem(){
            Convolution(kernel=(3,3), channels=1, stride=(2, 2), padding="same") ->
            BatchNorm() ->
            LeakyRelu()
        }

        def conv(){
            Convolution(kernel=(3,3), channels=1, stride=(1, 1), padding="same") ->
            BatchNorm() ->
            LeakyRelu()
        }

        def reductionConv(){
            Convolution(kernel=(3,3), channels=1, stride=(2, 2), padding="same") ->
            BatchNorm() ->
            LeakyRelu()
        }

        def residualBlock(){
            (
                conv() ->
                conv()
            |
                LeakyRelu()
            ) ->
            Add()
        }

        def reductionBlock(){
            (
                conv() ->
                conv() ->
                reductionConv()
            |
                reductionConv()
            ) ->
            Add()
        }

        image ->
        stem() ->
        residualBlock(-> = 4) ->
        reductionBlock() ->
        residualBlock(-> = 4) ->
        reductionBlock() ->
        FullyConnected(units=classes) ->
        predictions;
    }
}